#!/usr/bin/env python3
# --------------------( LICENSE                           )--------------------
# Copyright (c) 2014-2020 Cecil Curry.
# See "LICENSE" for further details.

'''
**Beartype utilities.**

This private submodule implements supplementary utility functions required by
various :mod:`beartype` facilities, including callables generated by the
:func:`beartype.beartype` decorator.

This private submodule is *not* intended for importation by downstream callers.
'''

# ....................{ IMPORTS                            }....................
import re, sys

# ....................{ CONSTANTS ~ py                     }....................
IS_PYTHON_AT_LEAST_4_0 = sys.version_info >= (4, 0)
'''
``True`` only if the active Python interpreter targets at least Python 4.0.0.
'''


IS_PYTHON_AT_LEAST_3_7 = IS_PYTHON_AT_LEAST_4_0 or sys.version_info >= (3, 7)
'''
``True`` only if the active Python interpreter targets at least Python 3.7.0.
'''

# ....................{ GETTERS                            }....................
def get_obj_type(obj: object) -> type:
    '''
    Either the passed object if this object is a class *or* the class of this
    object otherwise (i.e., if this object is *not* a class).

    Note that this function *never* raises exceptions on arbitrary objects,
    since the :func:`type` builtin wisely returns itself when passed itself:
    e.g.,

        >>> type(type(type)) is type
        True

    Parameters
    ----------
    obj : object
        Object to be inspected.

    Returns
    ----------
    type
        Type of this object.
    '''

    return obj if isinstance(obj, type) else type(obj)


def get_obj_module_name_or_none(obj: object) -> (str, type(None)):
    '''
    Fully-qualified name of the module declaring either the passed object if
    this object is a class *or* the class of this object otherwise (i.e., if
    this object is *not* a class) if this class declares a ``__module__``
    dunder attribute *or* ``None`` otherwise.

    Parameters
    ----------
    obj : object
        Object to be inspected.

    Returns
    ----------
    (str, type(None))
        Either:

        * Fully-qualified name of the module declaring the type of this object
          if this type declares a ``__module__`` dunder attribute.
        * ``None`` otherwise.
    '''

    # Make it so, ensign.
    return getattr(get_obj_type(obj), '__module__', None)

# ....................{ TRIMMERS                           }....................
def trim_object_repr(obj: object, max_len: int = 76) -> str:
    '''
    Terse human-readable string truncated from the string representation of the
    passed object to the passed maximum length in a general-purpose manner
    suitable for safe interpolation into end-user exception messages.

    Parameters
    ----------
    obj: object
        Object whose representation is to be trimmed, converted into a string
        via the canonical :func:`repr` builtin.
    max_len: Optional[int]
        Maximum length of the string to be returned. Defaults to the customary
        line length of 80 characters minus default output indentation of four
        characters.

    Returns
    ----------
    str
        Human-readable string truncated from the string representation of this
        object to this maximum length.
    '''
    assert isinstance(max_len, int), '"{!r}" not an integer.'.format(max_len)

    # Uncompiled regular expression grouping zero or more non-newline leading
    # characters preceding this maximum length *AND* zero or more trailing
    # delimiters.
    #
    # Note that efficiency is *NOT* a consideration for this utility function,
    # which is only called in the edge-case event of a runtime type exception.
    PRE_MAX_CHARS_LAST_DELIMITERS_REGEX = (
        r'^([^\n]{0,' + str(max_len) + r'}).*?([\])}>\'"]*)$')

    # String describing the passed object. For debuggability, the verbose
    # (albeit less human-readable) output of repr() is preferred to the terse
    # (albeit more human-readable) output of str().
    obj_synopsis = repr(obj)

    # If this synopsis either exceeds this maximum length *OR* contains a
    # newline, replace the substring of this synopsis from whichever of the
    # first character following this maximum length or the first newline occurs
    # first to the string end (excluding any # optional trailing delimiters)
    # with a single ellipses.
    if len(obj_synopsis) > max_len or '\n' in obj_synopsis:
        obj_synopsis = re.sub(
            PRE_MAX_CHARS_LAST_DELIMITERS_REGEX,
            r'\1...\2',
            obj_synopsis,
            flags=re.DOTALL
        )

    # Return this synopsis.
    return obj_synopsis
