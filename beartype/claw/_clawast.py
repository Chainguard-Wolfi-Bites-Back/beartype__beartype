#!/usr/bin/env python3
# --------------------( LICENSE                            )--------------------
# Copyright (c) 2014-2022 Beartype authors.
# See "LICENSE" for further details.

'''
**Beartype all-at-once abstract syntax tree (AST) transformation.**

This private submodule defines the low-level abstract syntax tree (AST)
transformation automatically decorating well-typed third-party packages and
modules with runtime type-checking dynamically generated by the
:func:`beartype.beartype` decorator.

This private submodule is *not* intended for importation by downstream callers.
'''

# ....................{ TODO                               }....................

# ....................{ IMPORTS                            }....................
from ast import (
    NodeTransformer,
)
# from beartype.typing import (
#     Iterable,
#     Union,
# )

# See the "beartype.cave" submodule for further commentary.
__all__ = ['STAR_IMPORTS_CONSIDERED_HARMFUL']

# ....................{ PRIVATE ~ classes                  }....................
#FIXME: Implement us up, please.
#FIXME: Docstring us up, please.
#FIXME: Unit test us up, please.
class _BeartypeNodeTransformer(NodeTransformer):
    '''
    **Beartype node transformer** (i.e., ...).

    Attributes
    ----------

    See Also
    ----------
    '''

    # ..................{ INITIALIZERS                       }..................
    # def __init__(
    #     self,
    # ) -> None:
    #     '''
    #     Initialize this node transformer.
    #
    #     Parameters
    #     ----------
    #
    #     All remaining keyword parameters are passed as is to the
    #     :func:`NodeTransformer.__init__` method.
    #     '''
    #
    #     # Initialize our superclass with all remaining parameters.
    #     super().__init__(*args, **kwargs)
    #
    #     # Classify all subclass-specific parameters.
    #     self.package_names = package_names
