#!/usr/bin/env python3
# --------------------( LICENSE                           )--------------------
# Copyright (c) 2014-2020 Cecil Curry.
# See "LICENSE" for further details.

'''
**Hear beartype roar** as it handles errors and warnings.

This submodule defines hierarchies of :mod:`beartype`-specific exceptions
and warnings emitted by the :func:`beartype.beartype` decorator.
'''

# ....................{ IMPORTS                           }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: To avoid polluting the public module namespace, external attributes
# should be locally imported at module scope *ONLY* under alternate private
# names (e.g., "from argparse import ArgumentParser as _ArgumentParser" rather
# than merely "from argparse import ArgumentParser").
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

from abc import _ABCMeta

# See the "beartype.__init__" submodule for further commentary.
__all__ = ['STAR_IMPORTS_CONSIDERED_HARMFUL']

# ....................{ EXCEPTIONS                        }....................
#FIXME: Differentiate these two types of exceptions: e.g.,
#
#* Define a new "BeartypeDecoratorException(BeartypeException)" raised only
#  at decoration time.
#* Define a new "BeartypeCheckException(BeartypeException)" raised only at
#  callable call time.
class BeartypeException(Exception, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartype exceptions.**

    Instances of subclasses of this exception are raised either:

    * At decoration time from the :func:`beartype.beartype` decorator.
    * At call time from the new callable generated by the
      :func:`beartype.beartype` decorator to wrap the original callable.
    '''

    pass

# ....................{ EXCEPTIONS ~ decorator            }....................
class BeartypeDecoratorException(BeartypeException, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartype decorator exceptions.**

    Instances of subclasses of this exception are raised at decoration time
    from the :func:`beartype.beartype` decorator.
    '''

    pass


class BeartypeDecoratorHintedTupleItemInvalidException(
    BeartypeDecoratorException):
    '''
    **Beartype decorator hinted tuple item invalid exception.**

    This exception is raised at decoration time from the
    :func:`beartype.beartype` decorator on receiving a callable hinted with a
    :class:`tuple` containing one or more invalid items.
    '''

    pass


class BeartypeDecoratorParseException(BeartypeDecoratorException):
    '''
    **Beartype decorator parse exception.**

    This exception is raised at decoration time from the
    :func:`beartype.beartype` decorator on generating an unparseable (i.e.,
    syntactically invalid) new callable to wrap the original callable.
    '''

    pass

# ....................{ EXCEPTIONS ~ callable             }....................
class BeartypeCallableException(BeartypeException, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartype callable exceptions.**

    Instances of subclasses of this exception are raised at call time from the
    new callable generated by the :func:`beartype.beartype` decorator to wrap
    the original callable.
    '''

    pass
