#!/usr/bin/env python3
# --------------------( LICENSE                           )--------------------
# Copyright (c) 2014-2021 Beartype authors.
# See "LICENSE" for further details.

'''
**Beartype decorator configuration API** (i.e., enumerations, classes,
singletons, and other attributes enabling external callers to selectively
configure the :func:`beartype` decorator on a fine-grained per-decoration call
basis).

Most of the public attributes defined by this private submodule are explicitly
exported to external callers in our top-level :mod:`beartype.__init__`
submodule. This private submodule is *not* intended for direct importation by
downstream callers.
'''

# ....................{ IMPORTS                           }....................
from enum import (
    Enum,
    auto as next_enum_member_value,
    unique as die_unless_enum_member_values_unique,
)

# ....................{ ENUMERATIONS                      }....................
#FIXME: Unit test us up, please.
#FIXME: Document us up, please.
@die_unless_enum_member_values_unique
class BeartypeStrategy(Enum):
    '''
    * `BeartypeStrategy.O0`, disabling type-checking for a callable by
      reducing `@beartype` to the identity decorator for that callable.
      Although currently useless, this strategy will usefully allow end
      users to selectively prevent callables from being type-checked by
      our as-yet-unimplemented import hook. When implemented, that hook
      will type-check *all* callables in a given package by default.
      Some means is needed to prevent that from happening for select
      callables. This is that means.
    * `BeartypeStrategy.O1`, our default `O(1)` constant-time strategy
      type-checking a single randomly selected item of a container that
      you currently enjoy. Since this is the default, this strategy need
      *not* be explicitly configured.
    * `BeartypeStrategy.Ologn`, a new `O(lgn)` logarithmic strategy
      type-checking a randomly selected number of items `j` of a
      container `obj` such that `j = len(obj)`. This strategy is
      **currently unimplemented.** (*To be implemented by a future
      beartype release.*)
    * `BeartypeStrategy.On`, a new `O(n)` linear strategy type-checking
      *all* items of a container. This strategy is **currently
      unimplemented.** (*To be implemented by a future beartype
      release.*)
    '''

    O0 = next_enum_member_value()
    O1 = next_enum_member_value()
    Ologn = next_enum_member_value()
    On = next_enum_member_value()

# ....................{ CLASSES                           }....................
#FIXME: Unit test us up, please.
#FIXME: Document us up, please.
class BeartypeConfiguration(object):
    '''
    * An `is_debug` boolean instance variable. When enabled, `@beartype`
      emits debugging information for the decorated callable â€“ including
      the code for the wrapper function dynamically generated by
      `@beartype` that type-checks that callable.
    * A `strategy` instance variable whose value must be a
      `BeartypeStrategy` enumeration member. This is how you notify
      `@beartype` of which strategy to apply to each callable.
    '''

    is_debug: bool
    strategy: BeartypeStrategy

    def __init__(
       self,
       is_debug: bool = False,
       strategy: BeartypeStrategy = BeartypeStrategy.O1,
    ) -> None:

        #FIXME: Implement actual validation, please.
        if not isinstance(is_debug, bool):
            raise ValueError()
        if not isinstance(strategy, BeartypeStrategy):
            raise ValueError()

        self.is_debug = is_debug
        self.strategy = strategy

# ....................{ SINGLETONS                        }....................
#FIXME: Unit test us up, please.
#FIXME: Document us up, please. Note this attribute is intentionally *NOT*
#exported from "beartype.__init__".
BEAR_CONF_DEFAULT = BeartypeConfiguration()
