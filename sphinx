#!/usr/bin/env bash
# --------------------( LICENSE                           )--------------------
# Copyright (c) 2014-2022 Beartype authors.
# See "LICENSE" for further details.
#
# --------------------( SYNOPSIS                          )--------------------
# Bash shell script wrapping this project's Sphinx-based documentation build
# system, passing sane default options suitable for interactive terminal
# building and otherwise passing all passed arguments as is to the
# "sphinx-build" command via the "SPHINXOPTS" environment variable.
#
# This script is defined as a Bash rather than Bourne script purely for the
# canonical ${BASH_SOURCE} string global, reliably providing the absolute
# pathnames of this script and hence this script's directory.

# ....................{ ARRAYS                            }....................
# Array of all shell words with which to invoke "sphinx-build" below.
#
# Bizarrely, note that these Sphinx options are *ONLY* available in the short
# and long forms listed here. (This is us collectively shrugging.)
SPHINX_BUILD_ARGS=(
    command sphinx-build

    # ..................{ SPHINX ~ mode                     }..................
    # Generate HTML documentation.
    -M html

    # ..................{ SPHINX ~ paths                    }..................
    # Relative dirname of the directory containing source documentation in
    # reStructuredText (reST) format.
    doc/source/

    # Relative dirname of the directory containing target documentation in the
    # format corresponding to the "-M" option above (typically, HTML).
    doc/build/

    # Pass all remaining non-option arguments to "sphinx-build" as is,
    # comprising the set of all relative or absolute filenames to be built. If
    # unpassed, "sphinx-build" rebuilds all outdated files by default.
    "${@}"

    # ..................{ SPHINX ~ options                  }..................
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # CAUTION: In flagrant violation of POSIX standards, sensible norms, and
    # its own bloody documentation in both "--help" text and error messages,
    # "sphinx-build" requires that options be passed *AFTER* pathnames. By
    # inspection, the autogenerated "doc/Makefile" does so. If options are
    # erroneously passed *BEFORE* pathnames, "sphinx-build" fails with this
    # non-human-readable fatal error:
    #     $ ./sphinx
    #     usage: sphinx-build [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]
    #     sphinx-build: error: argument -d: expected one argument
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Convert non-fatal warnings into fatal errors for safety.
    -W

    # Parallelize the build process across *ALL* available CPU cores.
    -j auto

    # Collect *ALL* warnings before failing rather than immediately failing on
    # the first warning.
    --keep-going

    # Enable "nit-picky mode," generating one warning for each broken reference
    # (e.g., interdocument or intrasection link).
    -n
)
# echo "sphinx-build args: ${SPHINX_BUILD_ARGS[*]}"

# ....................{ FUNCTIONS                         }....................
# str canonicalize_path(str pathname)
#
# Canonicalize the passed pathname. The "readlink" command's GNU-specific "-f"
# option would be preferable but is unsupported by macOS's NetBSD-specific
# version of "readlink". Instead, just defer to Python for portability.
function canonicalize_path() {
    python -c "
import os, sys
print(os.path.realpath(os.path.expanduser(sys.argv[1])))" "${1}"
}

# ....................{ PATHS                             }....................
# Absolute or relative filename of this script.
SCRIPT_FILENAME="$(canonicalize_path "${BASH_SOURCE[0]}")"

# Absolute or relative dirname of the directory directly containing this
# script, equivalent to the top-level directory for this project.
SCRIPT_DIRNAME="$(dirname "${SCRIPT_FILENAME}")"

# ....................{ MAIN                              }....................
# Temporarily change the current working directory to that of this project.
# pushd "${SCRIPT_DIRNAME}/doc" >/dev/null
pushd "${SCRIPT_DIRNAME}" >/dev/null

# Build this project's documentation with all passed arguments.
"${SPHINX_BUILD_ARGS[@]}"

# 0-based exit code reported by the prior command.
exit_code=$?

# Revert the current working directory to the prior such directory.
popd >/dev/null

# Report the same exit code from this script.
exit ${exit_code}
