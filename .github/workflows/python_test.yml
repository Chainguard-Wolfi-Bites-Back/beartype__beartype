---
# --------------------( LICENSE                           )--------------------
# Copyright (c) 2014-2021 Beartype authors.
# See "LICENSE" for further details.
#
# --------------------( SYNOPSIS                          )--------------------
# GitHub-specific continuous integration (CI) configuration, enabling the usual
# GitHub Actions workflow for pure-Python packages exercised by "tox".
#
# --------------------( CAVEATS                           )--------------------
# *THIS CONFIGURATION SHOULD PERFORM ONLY THE BARE MINIMUM NUMBER OF TESTS.*
# Regrettably, tests *NOT* safeguarding the quality of the core Python package
# installed by this project should *NOT* be run. This includes:
#
# * Tests conditionally dependent on third-party packages such as:
#    * The scientific stack (e.g., NumPy, SciPy, matplotlib). Scientific
#      packages tend to be large and thus expensive to install, costing scarce
#      CI minutes while contributing little of note.
#    * The documentation stack (e.g., RTD, Sphinx, docutils). Documentation
#      packages also tend to be large. Unlike the scientific stack, these
#      packages are miserably slow at runtime -- presumably due to
#      inefficiencies in the docutils reStructuredText (reST) parser. Moreover,
#      since Read The Docs (RTD) already builds documentation and thus pays
#      these costs on our behalf, we have little incentive to do so ourselves.
#
# GitHub currently only allots public repositories 2,000 GitHub Actions minutes
# per month for an average of 66.66 minutes per day. While this test suite is
# fast, it's also run under multiple CPython and PyPy versions. That is still
# fast locally. Unfortunately, Azure (i.e., Microsoft's cloud computing
# platform that unsurprisingly also hosts GitHub Actions) is slow.
#
# Each CI run triggered by this workflow currently costs this project ~5 free
# GitHub Actions minutes on average despite running substantially faster on a
# dual-core AMD Athlon(tm) II X2 240 manufactured before the auspicious birth
# of Linus Torvalds. Since this project *MUST* support multiple CI runs per day
# (e.g., to test pull requests), we are rapidly bumping up against real-world
# business constraints.
#
# --------------------( SEE ALSO                          )--------------------
# * https://hynek.me/articles/python-github-actions
#   Well-authored blog post strongly inspiring this configuration.

# ....................{ METADATA                          }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: Changes to this name *MUST* be manually synchronized with:
# * The "|GitHub Actions badge|" image URL in the top-level "README.rst".
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Non-human-readable (i.e., machine-readable) label associated with this
# GitHub Actions workflow.
name: test

# ....................{ TRIGGER                           }....................
# Confine testing to only pushes and pull requests against the main branch,
# reducing consumption of scarce CI minutes for incidental feature branches.
on:
  push:
    branches:
      - main
  pull_request:
    #FIXME: Is this actually right?
    branches:
      - '**'

# ....................{ MAIN                              }....................
jobs:
  # ...................{ TESTS                             }...................
  # Job iteratively exercising our test suite against all Python interpreters
  # supported by this package (and also measuring the coverage of that suite).
  tests:
    # ..................{ MATRIX                            }..................
    strategy:
      matrix:
        # List of all platform-specific Docker images to test against,
        # including:
        # * The latest Long-Term Service (LTS) release of Ubuntu Linux, still
        #   the most popular Linux distro and thus a sane baseline.
        # * The latest *whatever* release of Microsoft Windows. Although Linux
        #   and macOS are both POSIX-compliant and thus crudely comparable from
        #   the low-level CLI perspective, Windows is POSIX-noncompliant and
        #   thus heavily divergent from both macOS and Linux.
        # * The latest *whatever* release of Apple macOS. We don't particularly
        #   need to exercise tests on macOS, given the platform's patent
        #   POSIX-compliant low-level similarities to Linux, but... what the
        #   heck. Why not? Since this is the lowest priority, we defer macOS
        #   testing until last.
        platform: [ubuntu-latest, windows-latest, macos-latest]

        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # WARNING: Changes to this section *MUST* be manually synchronized with:
        # * The "envlist" setting of the "[tox]" subsection in "tox.ini".
        # * The "include" setting below.
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        # List of all "tox" environments (defined by the "envlist" setting of
        # the "[tox]" subsection in "tox.ini") to be tested, which the
        # ${TOXENV} environment variable declared below exposes to "tox".
        tox-env:
          - py36-coverage
          - py37-coverage
          - py38-coverage
          - py39-coverage
          - pypy36-coverage
          - pypy37-coverage

          #FIXME: Uncomment *AFTER* Python 3.10 is officially released. Sadly,
          #the development version now fails to build wheels. *shrug*
          # - py310-coverage

        # Map each "tox" environment name listed in the "tox-env" list above to
        # the corresponding "python-version" string supported by the
        # "actions/setup-python" GitHub Action run below.
        include:
          - tox-env: py36-coverage
            python-version: 3.6
          - tox-env: py37-coverage
            python-version: 3.7
          - tox-env: py38-coverage
            python-version: 3.8
          - tox-env: py39-coverage
            python-version: 3.9
          #FIXME: Uncomment *AFTER* Python 3.10 is officially released.
          # - tox-env: py310
          #   python-version: 3.10
          #   python-version: 3.10-dev
          - tox-env: pypy36-coverage
            python-version: pypy-3.6
          - tox-env: pypy37-coverage
            python-version: pypy-3.7

    # ..................{ SETTINGS                          }..................
    # Arbitrary human-readable description.
    name: "[${{ matrix.platform }}] Python ${{ matrix.python-version }} CI"

    # Name of the current Docker image to run tests under.
    runs-on: "${{ matrix.platform }}"

    # Time in minutes to wait on the command pipeline run below to exit
    # *BEFORE* sending a non-graceful termination request (i.e., "SIGTERM"
    # under POSIX-compliant systems).
    timeout-minutes: 10

    # ..................{ VARIABLES                         }..................
    # External shell environment variables exposed to commands run below.
    env:
      # Prevent Python from buffering and hence failing to log output in the
      # unlikely (but feasible) event of catastrophic failure from either the
      # active Python process or OS kernel.
      PYTHONUNBUFFERED: True

      # Map from the current item of the "tox-env" list defined above to the
      # ${TOXENV} environment variable recognized by "tox".
      TOXENV: "${{ matrix.tox-env }}"

    # ..................{ PROCESS                           }..................
    steps:
      - name: 'Checking out repository...'
        uses: 'actions/checkout@v2'
      - name: "Installing Python ${{ matrix.python-version }}..."
        uses: 'actions/setup-python@v2'
        with:
          python-version: "${{ matrix.python-version }}"

      # Note that:
      # * This command *MUST* be platform-agnostic by running under both:
      #   * POSIX-compliant platforms (e.g., Linux, macOS).
      #   * POSIX-noncompliant platforms (e.g., Windows).
      #   In particular, commands that assume a POSIX-compliant shell (e.g.,
      #   Bash) *MUST* be avoided.
      # * Packaging dependencies (e.g., "pip") are upgraded *BEFORE* all
      #   remaining dependencies (e.g., "tox").
      - name: 'Upgrading packager dependencies...'
        run: |
          python -VV
          python -m site
          python -m pip --quiet install --upgrade pip setuptools wheel
      - name: 'Installing package dependencies...'
        run: python -m pip --quiet install --upgrade tox  #virtualenv 

      # Note that:
      #
      # * "--skip-missing-interpreters=false" disables the corresponding
      #   "skip_missing_interpreters = true" setting globally enabled by our
      #   top-level "tox.ini" configuration, forcing CI failures for
      #   unavailable Python environments. See also:
      #       https://github.com/tox-dev/tox/issues/903
      - name: 'Testing package with "tox"...'
        run: python -m tox --skip-missing-interpreters=false
with:
      - name: 'Publishing test coverage to Codecov...'
        uses: 'codecov/codecov-action@v1'
        with:
          name: "${{ matrix.platform }}-${{ matrix.python-version }}"
          # file: ./coverage.xml
          # name: ${{ runner.os }}-${{ matrix.python-version }}
